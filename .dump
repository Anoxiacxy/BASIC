1 REM sema_8.txt
2 REM input: 10
3 REM return value: 1
4 INPUT m
5 LET n = INT[m]
6 LET n[3 * 3] =  2
7 LET tmp = INT[n[9]]
8 LET i = 0 
9 FOR i = i + 1; i < n[9]
10 IF i % 2 == 0 THEN 12
11 LET n[i] = i
12 END FOR
13 LET n[0] = 9
14 EXIT n[1]
[NUM, 1][LINE_END, 1]
[NUM, 2][LINE_END, 2]
[NUM, 3][LINE_END, 3]
[NUM, 4][INPUT][ID, m][LINE_END, 4]
[NUM, 5][LET][ID, n][ASSIGN][INT][LBrackets][ID, m][RBrackets][LINE_END, 5]
[NUM, 6][LET][ID, n][LBrackets][NUM, 3][MUL][NUM, 3][RBrackets][ASSIGN][NUM, 2][LINE_END, 6]
[NUM, 7][LET][ID, tmp][ASSIGN][INT][LBrackets][ID, n][LBrackets][NUM, 9][RBrackets][RBrackets][LINE_END, 7]
[NUM, 8][LET][ID, i][ASSIGN][NUM, 0][LINE_END, 8]
[NUM, 9][FOR][ID, i][ASSIGN][ID, i][ADD][NUM, 1][SEMI_COLON][ID, i][LT][ID, n][LBrackets][NUM, 9][RBrackets][LINE_END, 9]
[NUM, 10][IF][ID, i][MOD][NUM, 2][EQU][NUM, 0][THEN][NUM, 12][LINE_END, 10]
[NUM, 11][LET][ID, n][LBrackets][ID, i][RBrackets][ASSIGN][ID, i][LINE_END, 11]
[NUM, 12][END][FOR][LINE_END, 12]
[NUM, 13][LET][ID, n][LBrackets][NUM, 0][RBrackets][ASSIGN][NUM, 9][LINE_END, 13]
[NUM, 14][EXIT][ID, n][LBrackets][NUM, 1][RBrackets][LINE_END, 14]
- Program: 
	4 - InputStmt: 
		- Identifier: m
	5 - LetStmt: 
		- Identifier: n
		- IntExpr: 
			- Identifier: m
	6 - LetStmt: 
		- ArrayExpr: n
			- Binary: *
				- Number: 3
				- Number: 3
		- Number: 2
	7 - LetStmt: 
		- Identifier: tmp
		- IntExpr: 
			- ArrayExpr: n
				- Number: 9
	8 - LetStmt: 
		- Identifier: i
		- Number: 0
	9 - ForStmt: 
		- Binary: <
			- Identifier: i
			- ArrayExpr: n
				- Number: 9
		- AssignExprAST: =
			- Identifier: i
			- Binary: +
				- Identifier: i
				- Number: 1
		- Number: 13
	10 - IfStmt: 
		- Binary: ==
			- Binary: %
				- Identifier: i
				- Number: 2
			- Number: 0
		- Number: 12
	11 - LetStmt: 
		- ArrayExpr: n
			- Identifier: i
		- Identifier: i
	12 - EndForStmt: 
		- Number: 9
	13 - LetStmt: 
		- ArrayExpr: n
			- Number: 0
		- Number: 9
	14 - ExitStmt: 
		- ArrayExpr: n
			- Number: 1
